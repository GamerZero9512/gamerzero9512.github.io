@echo off
chcp 65001 >nul
for /f "delims=" %%T in ('powershell -NoProfile -Command "[console]::Title"') do set WinTitle=%%T
echo %WinTitle% | findstr /i "Command Prompt" >nul
if %errorlevel%==0 (
    set pause=0
) else (
    set pause=1
    title System Info
)

powershell -NoProfile -ExecutionPolicy Bypass -Command " $ErrorActionPreference='SilentlyContinue'; $cpu=Get-CimInstance Win32_Processor; $gpu=Get-CimInstance Win32_VideoController | Select-Object -First 1; $ramSys=Get-CimInstance Win32_ComputerSystem; $ramFirst=Get-CimInstance Win32_PhysicalMemory | Select-Object -First 1; $logical=Get-CimInstance Win32_LogicalDisk -Filter 'DriveType=2 OR DriveType=3'; $drivesList=@(); foreach($l in $logical){ $letter=$l.DeviceID.TrimEnd(':'); $sizeVal = 0; if ($l.Size) { $sizeVal = [int64]$l.Size } ; $vendor=''; $modelStr=$null; try { $part = Get-Partition -DriveLetter $letter -ErrorAction Stop | Select-Object -First 1 } catch { $part = $null } ; if ($part -and $part.DiskNumber -ne $null) { try { $disk = Get-Disk -Number $part.DiskNumber -ErrorAction Stop | Select-Object -First 1 } catch { $disk = $null } } else { $disk = $null } ; if ($disk) { if ($disk.FriendlyName) { $modelStr = $disk.FriendlyName } elseif ($disk.Model) { $modelStr = $disk.Model } } ; if (-not $modelStr) { try { $w = Get-CimInstance Win32_DiskDrive | Where-Object { $_.DeviceID -match $part.DeviceId } | Select-Object -First 1; if ($w -and $w.Model) { $modelStr = $w.Model } } catch { } } ; if ($modelStr) { $parts = $modelStr -split '\s+'; $vendorMatch = ($parts | Where-Object { $_ -match 'Samsung|Micron|Intel|WDC|Western|Seagate|Kingston|Crucial|ADATA|SanDisk|Toshiba|Transcend|SK|SKhynix|HP|HGST' }) | Select-Object -First 1; if (-not $vendorMatch) { $vendorMatch = $parts[0] }; $vendor = $vendorMatch } ; if ($sizeVal -ge 1125899906842624) { $sizeStr = '{0:N0}PB' -f ($sizeVal/1125899906842624) } elseif ($sizeVal -ge 1099511627776) { $sizeStr = '{0:N0}TB' -f ($sizeVal/1099511627776) } elseif ($sizeVal -ge 1073741824) { $sizeStr = '{0:N0}GB' -f ($sizeVal/1073741824) } else { $sizeStr = '{0:N0}MB' -f ($sizeVal/1048576) } ; if ([string]::IsNullOrWhiteSpace($vendor)) { $val = $sizeStr } else { $val = $sizeStr + ' ' + $vendor } ; $drivesList += [PSCustomObject]@{Letter=$letter; Value=$val} } ; $rows=@(); $rows += [PSCustomObject]@{Component='CPU'; Value=$cpu.Name.ToString()}; $rows += [PSCustomObject]@{Component='├ Cores'; Value=$cpu.NumberOfCores.ToString()}; $rows += [PSCustomObject]@{Component='└ Clock'; Value=($cpu.MaxClockSpeed.ToString() + ' MHz')}; $rows += [PSCustomObject]@{Component='GPU'; Value=$gpu.Name.ToString()}; $vram = if($gpu.AdapterRAM){ ([math]::Round($gpu.AdapterRAM/1MB)).ToString() + ' MB' } else { '0 MB' }; $rows += [PSCustomObject]@{Component='└ VRAM'; Value=$vram}; $rows += [PSCustomObject]@{Component='RAM'; Value=([math]::Round($ramSys.TotalPhysicalMemory/1MB)).ToString() + ' MB'}; $rows += [PSCustomObject]@{Component='└ Clock'; Value=($ramFirst.ConfiguredClockSpeed.ToString() + ' MHz')}; if ($drivesList.Count -gt 0) { $rows += [PSCustomObject]@{Component='Drives'; Value=''}; for ($i=0; $i -lt $drivesList.Count; $i++) { $prefix='├'; if ($i -eq $drivesList.Count - 1) { $prefix = '└' }; $rows += [PSCustomObject]@{Component=($prefix + ' ' + $drivesList[$i].Letter + ':'); Value=$drivesList[$i].Value} } }; $rows | Format-Table -AutoSize "

if %pause%==1 (
    echo.
    echo Press any key to exit
    pause > nul
)